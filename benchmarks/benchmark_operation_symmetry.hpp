#ifndef WASMEXTENDEDNUMERICS_BENCHMARKS_BENCHMARK_OPERATION_SYMMETRY_HPP_
#define WASMEXTENDEDNUMERICS_BENCHMARKS_BENCHMARK_OPERATION_SYMMETRY_HPP_

#include "../src/Numeric.hpp"
#include "random_numeric_generators.hpp"
#include "benchmark_settings_and_defs.hpp"
#include "time_benchmark_operation.hpp"

#define SYMMETRY_OPERATION_DESCRIPTION(LEFT_OPERAND_TYPE, BINARY_OP, RIGHT_OPERAND_TYPE)\
std::setw((DESCRIPTION_WIDTH/2) + 4) << XSTR(LEFT_OPERAND_TYPE) << " " XSTR(BINARY_OP) " " << std::left\
<< std::setw((DESCRIPTION_WIDTH/2) + 5) << XSTR(RIGHT_OPERAND_TYPE) << std::right

#define ADD_SYMMETRY_OPERATION_RESULTS_ENTRY(LEFT_OPERAND_TYPE, BINARY_OP, RIGHT_OPERAND_TYPE,\
FORWARDS_AVG_TIME, BACKWARDS_AVG_TIME, LOOPS_PER_SAMPLE, RESULTS_OSTREAM)\
RESULTS_OSTREAM << SYMMETRY_OPERATION_DESCRIPTION(LEFT_OPERAND_TYPE, BINARY_OP, RIGHT_OPERAND_TYPE)\
                << std::setw(TIME_PER_OPERATION_COLUMN_SIZE - 10) << std::setprecision(4)\
                << TIME_PER_OPERATION_TO_STRING(AVG_TIME_TO_PER_OPERATION_TIME(FORWARDS_AVG_TIME, LOOPS_PER_SAMPLE)) << std::endl\
                << std::setw(DESCRIPTION_WIDTH + 10)\
                << SYMMETRY_OPERATION_DESCRIPTION(RIGHT_OPERAND_TYPE, BINARY_OP, LEFT_OPERAND_TYPE)\
                << std::setw(TIME_PER_OPERATION_COLUMN_SIZE - 10)\
                << TIME_PER_OPERATION_TO_STRING(AVG_TIME_TO_PER_OPERATION_TIME(BACKWARDS_AVG_TIME, LOOPS_PER_SAMPLE)) << std::endl\
                << std::setprecision(6) << std::endl;\


#define BENCHMARK_OPERATION_SYMMETRY_FOR_OPERANDS(LOOPS_PER_SAMPLE, BINARY_OP,\
LEFT_OPERAND_TYPE, LEFT_OPERAND_BIT_SIZE, RIGHT_OPERAND_TYPE, RIGHT_OPERAND_BIT_SIZE, RESULTS_OSTREAM) \
{\
  Numeric left_operand = random_##LEFT_OPERAND_TYPE(LEFT_OPERAND_BIT_SIZE);\
  Numeric right_operand = random_##LEFT_OPERAND_TYPE(RIGHT_OPERAND_BIT_SIZE);\
  std::chrono::TIME_UNITS forwards_avg_time;\
  std::chrono::TIME_UNITS backwards_avg_time;\
  {\
    WARM_AND_TIME_BENCHMARK_OPERATION(LOOPS_PER_SAMPLE, left_operand BINARY_OP right_operand,\
    left_operand BINARY_OP right_operand, SYMMETRY_OPERATION_DESCRIPTION(LEFT_OPERAND_TYPE, BINARY_OP,\
    RIGHT_OPERAND_TYPE), BE_VERBOSE)\
    forwards_avg_time = avg_time;\
  }\
  {\
    WARM_AND_TIME_BENCHMARK_OPERATION(LOOPS_PER_SAMPLE, right_operand BINARY_OP left_operand,\
    right_operand BINARY_OP left_operand, SYMMETRY_OPERATION_DESCRIPTION(RIGHT_OPERAND_TYPE, BINARY_OP,\
    LEFT_OPERAND_TYPE), BE_VERBOSE)\
    backwards_avg_time = avg_time;\
  }\
  ADD_SYMMETRY_OPERATION_RESULTS_ENTRY(LEFT_OPERAND_TYPE, BINARY_OP, RIGHT_OPERAND_TYPE,\
  forwards_avg_time, backwards_avg_time, LOOPS_PER_SAMPLE, RESULTS_OSTREAM)\
}

#define BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(LEFT_OPERAND_TYPE, LEFT_OPERAND_ADDITION_BIT_SIZE,\
LEFT_OPERAND_SUBTRACTION_BIT_SIZE, LEFT_OPERAND_MULTIPLICATION_BIT_SIZE, LEFT_OPERAND_DIVISION_BIT_SIZE,\
RIGHT_OPERAND_TYPE, RIGHT_OPERAND_ADDITION_BIT_SIZE, RIGHT_OPERAND_SUBTRACTION_BIT_SIZE,\
RIGHT_OPERAND_MULTIPLICATION_BIT_SIZE, RIGHT_OPERAND_DIVISION_BIT_SIZE, ADDITION_LOOPS_PER_SAMPLE,\
SUBTRACTION_LOOPS_PER_SAMPLE, MULTIPLICATION_LOOPS_PER_SAMPLE, DIVISION_LOOPS_PER_SAMPLE, RESULTS_OSTREAM)\
BENCHMARK_OPERATION_SYMMETRY_FOR_OPERANDS(ADDITION_LOOPS_PER_SAMPLE, +, LEFT_OPERAND_TYPE,\
      LEFT_OPERAND_ADDITION_BIT_SIZE, RIGHT_OPERAND_TYPE, RIGHT_OPERAND_ADDITION_BIT_SIZE, RESULTS_OSTREAM)\
BENCHMARK_OPERATION_SYMMETRY_FOR_OPERANDS(SUBTRACTION_LOOPS_PER_SAMPLE, -, LEFT_OPERAND_TYPE,\
      LEFT_OPERAND_SUBTRACTION_BIT_SIZE, RIGHT_OPERAND_TYPE, RIGHT_OPERAND_SUBTRACTION_BIT_SIZE, RESULTS_OSTREAM)\
BENCHMARK_OPERATION_SYMMETRY_FOR_OPERANDS(MULTIPLICATION_LOOPS_PER_SAMPLE, *, LEFT_OPERAND_TYPE,\
      LEFT_OPERAND_MULTIPLICATION_BIT_SIZE, RIGHT_OPERAND_TYPE, RIGHT_OPERAND_MULTIPLICATION_BIT_SIZE, RESULTS_OSTREAM)\
BENCHMARK_OPERATION_SYMMETRY_FOR_OPERANDS(DIVISION_LOOPS_PER_SAMPLE, /, LEFT_OPERAND_TYPE,\
      LEFT_OPERAND_DIVISION_BIT_SIZE, RIGHT_OPERAND_TYPE, RIGHT_OPERAND_DIVISION_BIT_SIZE, RESULTS_OSTREAM)

void add_results_operation_symmetry(std::ostream &results) {
  results << "Operation operand symmetry benchmark:" << std::endl << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(exact_complexnum, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        inexact_complexnum, 0, 0, 0, 0, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;



  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(ratnum, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        exact_complexnum, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(ratnum, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        inexact_complexnum, 0, 0, 0, 0, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;



  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(bignum, BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE,\
        BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE, BIGNUM_MULTIPLICATION_BASE_BIT_SIZE, BIGNUM_DIVISION_BASE_BIT_SIZE,\
        exact_complexnum, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(bignum, BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE,\
        BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE, BIGNUM_MULTIPLICATION_BASE_BIT_SIZE, BIGNUM_DIVISION_BASE_BIT_SIZE,\
        ratnum, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(bignum, BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE,\
        BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE, BIGNUM_MULTIPLICATION_BASE_BIT_SIZE, BIGNUM_DIVISION_BASE_BIT_SIZE,\
        inexact_complexnum, 0, 0, 0, 0, (100 * FAST_OP_LOOPS_PER_SAMPLE),\
        (100 * FAST_OP_LOOPS_PER_SAMPLE), (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * FAST_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;



  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(fixnum, 0, 0, 0, 0,\
        exact_complexnum, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(fixnum, 0, 0, 0, 0,\
        ratnum, RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE,\
        RATIONAL_NUMBER_BIT_SIZE, RATIONAL_NUMBER_BIT_SIZE, (100 * MEDIUM_OP_LOOPS_PER_SAMPLE),\
        (100 * MEDIUM_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), (100 * SLOW_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(fixnum, 0, 0, 0, 0,\
        bignum, BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE, BIGNUM_ADDITION_SUBTRACTION_BASE_BIT_SIZE,\
        BIGNUM_MULTIPLICATION_BASE_BIT_SIZE, BIGNUM_DIVISION_BASE_BIT_SIZE, FAST_OP_LOOPS_PER_SAMPLE * 10,\
        FAST_OP_LOOPS_PER_SAMPLE * 10, MEDIUM_OP_LOOPS_PER_SAMPLE * 10, FAST_OP_LOOPS_PER_SAMPLE * 10, results)
  results << std::endl;

  BENCHMARK_OPERATION_SYMMETRY_FOR_ALL_ARITHMETIC_OPERATIONS(fixnum, 0, 0, 0, 0,\
        inexact_complexnum, 0, 0, 0, 0, (100 * TRIVIAL_OP_LOOPS_PER_SAMPLE),\
        (100 * TRIVIAL_OP_LOOPS_PER_SAMPLE), (100 * TRIVIAL_OP_LOOPS_PER_SAMPLE), (100 * TRIVIAL_OP_LOOPS_PER_SAMPLE), results)
  results << std::endl;

}

#endif //WASMEXTENDEDNUMERICS_BENCHMARKS_BENCHMARK_OPERATION_SYMMETRY_HPP_
